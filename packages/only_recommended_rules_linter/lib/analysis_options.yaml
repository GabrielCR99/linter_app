analyzer:

  exclude:
        - build/**
        - assets/**
        - "**/*.g.dart"
        - "**/*.freezed.dart"
        # - test/**
        # - "lib/src/core/logger/**.dart"
        - "**/firebase_options.dart"

  language:
        strict-casts: true
        strict-inference: true
        strict-raw-types: true

  errors:
        prefer_relative_imports: warning
        constant_identifier_names: warning
        non_constant_identifier_names: warning
        unused_import: warning
        avoid_redundant_argument_values: warning
        require_trailing_commas: warning
        always_put_required_named_parameters_first: warning
        prefer_single_quotes: warning
        missing_required_param: error
        missing_return: error

linter:
  rules:
        - curly_braces_in_flow_control_structures
        - constant_identifier_names
        - await_only_futures
        - valid_regexps
        - unrelated_type_equality_checks
        - no_wildcard_variable_uses
        - no_duplicate_case_values
        - hash_and_equals
        - empty_statements
        - control_flow_in_finally
        - collection_methods_unrelated_type
        - avoid_types_as_parameter_names
        - always_declare_return_types
        - always_put_control_body_on_new_line
        - always_put_required_named_parameters_first
        - always_require_non_null_named_parameters
        - annotate_overrides
        - avoid_bool_literals_in_conditional_expressions
        - avoid_classes_with_only_static_members
        - avoid_catching_errors
        - avoid_double_and_int_checks
        - avoid_dynamic_calls
        - avoid_empty_else
        - avoid_equals_and_hash_code_on_mutable_classes
        - avoid_escaping_inner_quotes
        - avoid_field_initializers_in_const_classes
        - avoid_final_parameters
        - avoid_function_literals_in_foreach_calls
        - avoid_init_to_null
        - avoid_js_rounded_ints
        - avoid_multiple_declarations_per_line
        - avoid_null_checks_in_equality_operators
        - avoid_positional_boolean_parameters
        - avoid_print
        - avoid_private_typedef_functions
        - avoid_redundant_argument_values
        - avoid_relative_lib_imports
        - avoid_renaming_method_parameters
        - avoid_return_types_on_setters
        - avoid_returning_null
        - avoid_returning_null_for_void
        - avoid_returning_this
        - avoid_setters_without_getters
        - avoid_shadowing_type_parameters
        - avoid_single_cascade_in_expression_statements
        - camel_case_extensions
        - camel_case_types
        - dangling_library_doc_comments
        - empty_catches
        - empty_constructor_bodies
        - exhaustive_cases
        - file_names
        - implementation_imports
        - implicit_call_tearoffs
        - library_annotations
        - library_prefixes
        - library_private_types_in_public_api
        - no_leading_underscores_for_library_prefixes
        - no_leading_underscores_for_local_identifiers
        - non_constant_identifier_names
        - null_check_on_nullable_type_parameter
        - null_closures
        - overridden_fields
        - prefer_adjacent_string_concatenation
        - prefer_collection_literals
        - prefer_conditional_assignment
        - prefer_contains
        - prefer_final_fields
        - prefer_for_elements_to_map_fromIterable
        - prefer_function_declarations_over_variables
        - prefer_generic_function_type_aliases
        - prefer_if_null_operators
        - prefer_initializing_formals
        - prefer_inlined_adds
        - prefer_interpolation_to_compose_strings
        - prefer_is_empty
        - prefer_is_not_empty
        - prefer_is_not_operator
        - prefer_iterable_whereType
        - prefer_null_aware_operators
        - prefer_spread_collections
        - prefer_typing_uninitialized_variables
        - provide_deprecation_message
        - recursive_getters
        - slash_for_doc_comments
        - type_init_formals
        - type_literal_in_constant_pattern
        - unnecessary_brace_in_string_interps
        - unnecessary_const
        - unnecessary_constructor_name
        - unnecessary_getters_setters
        - unnecessary_late
        - unnecessary_new
        - unnecessary_null_aware_assignments
        - unnecessary_null_in_if_null_operators
        - unnecessary_nullable_for_final_variable_declarations
        - unnecessary_overrides
        - unnecessary_string_escapes
        - unnecessary_string_interpolations
        - unnecessary_this
        - unnecessary_to_list_in_spreads
        - use_function_type_syntax_for_parameters
        - use_rethrow_when_possible
        - use_string_in_part_of_directives
        - use_super_parameters
        - void_checks
        - sort_constructors_first

        # * Pub rules
        - depend_on_referenced_packages
        - package_names
        - secure_pubspec_urls
